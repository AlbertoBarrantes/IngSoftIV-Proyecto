// src/App.js
import React, { useState, useEffect } from 'react';
import { fetchData, postData, putData, deleteData } from './Services/api';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import Sidebar from './components/Sidebar/Sidebar';
import Home from './pages/Home/Home';
import ProductoPage from './pages/ProductoPage';
import EstadoOrdenForm from './components/EstadoOrdenForm';
import EstadoOrdenList from './components/EstadoOrdenList';

function App() {
  const [estadoOrdenes, setEstadoOrdenes] = useState([]);  // Estado para almacenar los datos de los estados de orden
  const [selectedEstadoOrden, setSelectedEstadoOrden] = useState(null);  // Estado para almacenar el estado de orden seleccionado para editar

  // Cargar los estados de orden cuando el componente se monta
  useEffect(() => {
    const loadEstadoOrdenes = async () => {
      try {
        const data = await fetchData('estadoorden');
        setEstadoOrdenes(data);  // Guardamos los datos obtenidos de la API
      } catch (error) {
        console.error("Error cargando los estados de orden:", error);
      }
    };
    loadEstadoOrdenes();
  }, []);  // El array vacío asegura que esta función solo se ejecute una vez al montar el componente

  // Función para guardar o actualizar un estado de orden
  const handleSaveEstadoOrden = async (data) => {
    try {
      if (selectedEstadoOrden) {
        // Si ya hay un estado seleccionado, actualizamos
        await putData(`estadoorden/${selectedEstadoOrden.idEstadoOrden}`, data);
      } else {
        // Si no hay estado seleccionado, creamos uno nuevo
        await postData('estadoorden', data);
      }
      // Recargamos la lista de estados de orden después de guardar
      const newEstadoOrdenes = await fetchData('estadoorden');
      setEstadoOrdenes(newEstadoOrdenes);
      setSelectedEstadoOrden(null);  // Reseteamos el estado de la orden seleccionada
    } catch (error) {
      console.error("Error guardando el estado de orden:", error);
    }
  };

  // Función para eliminar un estado de orden
  const handleDeleteEstadoOrden = async (id) => {
    try {
      await deleteData(`estadoorden/${id}`);
      const newEstadoOrdenes = await fetchData('estadoorden');
      setEstadoOrdenes(newEstadoOrdenes);
    } catch (error) {
      console.error("Error eliminando el estado de orden:", error);
    }
  };

  // Función para seleccionar un estado de orden para editar
  const handleEditEstadoOrden = (estadoOrden) => {
    setSelectedEstadoOrden(estadoOrden);
  };

  return (
    <div className="App">

    <Sidebar />
    
    {/* Contenido principal de las páginas */}
    <div className="content flex-grow-1 p-3">
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/productos" element={<ProductoPage />} />
            {/* Agrega más rutas según sea necesario */}
          </Routes>
        </div>

      {/* Componente para el formulario */}
      <EstadoOrdenForm 
        estadoOrden={selectedEstadoOrden} 
        onSave={handleSaveEstadoOrden} 
      />
      
      {/* Componente para mostrar la lista de estados de orden */}
      <EstadoOrdenList 
        estadoOrdenes={estadoOrdenes} 
        onEdit={handleEditEstadoOrden} 
        onDelete={handleDeleteEstadoOrden} 
      />
    </div>
  );
}

export default App;
